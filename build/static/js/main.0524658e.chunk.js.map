{"version":3,"sources":["logo.svg","components/NavBar.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","className","href","App","state","amount","months","interestRate","monthlyPayment","numPayments","formatAmountLabel","val","axios","get","this","then","res","setState","data","catch","e","console","log","prevProps","prevState","status","maxValue","minValue","value","onChange","formatLabel","Component","Home","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uJAAAA,EAAOC,QAAU,IAA0B,kC,mMCE5B,SAASC,IACvB,OACO,6BACI,yBAAKC,UAAU,sBACxB,yBAAKA,UAAU,oCACf,4BAAI,uBAAGA,UAAU,gBAAgBC,KAAK,KAAlC,+BAIS,wBAAID,UAAU,eAAd,gC,ICmGDE,E,2MApGdC,MAAQ,CACPC,OAAQ,IACRC,OAAQ,EACRC,aAAc,EACdC,eAAgB,EAChBC,YAAa,G,EAgDdC,kBAAoB,SAAAC,GACnB,MAAM,IAAN,OAAWA,I,mFA9CS,IAAD,OACnBC,IACEC,IADF,kEAGGC,KAAKV,MAAMC,OAHd,sBAIgBS,KAAKV,MAAME,SAEzBS,MAAK,SAAAC,GACL,EAAKC,SAAS,CACbV,aAAcS,EAAIE,KAAKX,aACvBC,eAAgBQ,EAAIE,KAAKV,eAAeH,OACxCI,YAAaO,EAAIE,KAAKT,iBAGvBU,OAAM,SAAAC,GAAC,OAAIC,QAAQC,IAAIF,MACzBC,QAAQC,IAAIR,KAAKV,S,yCAGCmB,EAAWC,GAAY,IAAD,OAEvCV,KAAKV,MAAMC,SAAWmB,EAAUnB,QAChCS,KAAKV,MAAME,SAAWkB,EAAUlB,QAEhCM,IACEC,IADF,kEAGGC,KAAKV,MAAMC,OAHd,sBAIgBS,KAAKV,MAAME,SAEzBS,MAAK,SAAAC,GACLK,QAAQC,IAAIN,EAAIE,MACZF,EAAIE,KAAKO,QAA8B,UAApBT,EAAIE,KAAKO,OAC/BJ,QAAQC,IAAI,kBAEZ,EAAKL,SAAS,CACbV,aAAcS,EAAIE,KAAKX,aACvBC,eAAgBQ,EAAIE,KAAKV,eAAeH,OACxCI,YAAaO,EAAIE,KAAKT,iBAIxBU,OAAM,SAAAC,GAAC,OAAIC,QAAQC,IAAIF,Q,+BAQjB,IAAD,OACR,OACC,6BACC,kBAAC,EAAD,MACA,yBAAKnB,UAAU,aACd,8BACC,yBAAKA,UAAU,cACd,8CACA,kBAAC,IAAD,CACCyB,SAAU,IACVC,SAAU,IACVC,MAAOd,KAAKV,MAAMC,OAClBwB,SAAU,SAAAxB,GAAM,OAAI,EAAKY,SAAS,CAAEZ,YACpCyB,YAAahB,KAAKJ,qBAGpB,yBAAKT,UAAU,cACd,4DACA,kBAAC,IAAD,CACCyB,SAAU,GACVC,SAAU,EACVC,MAAOd,KAAKV,MAAME,OAClBuB,SAAU,SAAAvB,GAAM,OAAI,EAAKW,SAAS,CAAEX,gBAIvC,6BAEA,yBAAKL,UAAY,QAChB,iDACA,8CAAmB,mCAASa,KAAKV,MAAMG,eACvC,gDAAqB,mCAASO,KAAKV,MAAMI,iBACzC,mDAAwB,mCAASM,KAAKV,MAAMK,qB,GA1FhCsB,aCMH5B,MARf,WACE,OACE,yBAAKF,UAAY,aAChB,kBAAC+B,EAAD,QCEeC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,MAAK,SAAA8B,GACjCA,EAAaC,kB","file":"static/js/main.0524658e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from \"react\";\r\n\r\nexport default function Navbar() {\r\n\treturn (\r\n        <div>\r\n            <nav className=\"nav navbar-inverse\">\r\n\t\t <div className=\"container justify-content-center\">\r\n\t\t <h1><a className=\"navbar-brand \" href=\"/\"> Loan Interest Calcuator</a></h1>\r\n\t\t</div>\r\n\r\n            </nav>\r\n                <h1 className=\"text-center\">Slider for loan calculation</h1>\r\n\r\n        </div>\r\n\t\t\r\n        \r\n\r\n\t);\r\n}","\r\nimport React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport InputRange from \"react-input-range\";\r\nimport \"react-input-range/lib/css/index.css\";\r\n\r\nimport NavBar from './NavBar';\r\n\r\n\r\nclass App extends Component {\r\n\tstate = {\r\n\t\tamount: 500,\r\n\t\tmonths: 6,\r\n\t\tinterestRate: 0,\r\n\t\tmonthlyPayment: 0,\r\n\t\tnumPayments: 0\r\n\t};\r\n\r\n\tcomponentDidMount() {\r\n\t\taxios\r\n\t\t\t.get(\r\n\t\t\t\t`https://ftl-frontend-test.herokuapp.com/interest?amount=${\r\n\t\t\t\t\tthis.state.amount\r\n\t\t\t\t}&numMonths=${this.state.months}`\r\n\t\t\t)\r\n\t\t\t.then(res => {\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tinterestRate: res.data.interestRate,\r\n\t\t\t\t\tmonthlyPayment: res.data.monthlyPayment.amount,\r\n\t\t\t\t\tnumPayments: res.data.numPayments\r\n\t\t\t\t});\r\n\t\t\t})\r\n\t\t\t.catch(e => console.log(e));\r\n\t\tconsole.log(this.state);\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps, prevState) {\r\n\t\tif (\r\n\t\t\tthis.state.amount !== prevState.amount ||\r\n\t\t\tthis.state.months !== prevState.months\r\n\t\t) {\r\n\t\t\taxios\r\n\t\t\t\t.get(\r\n\t\t\t\t\t`https://ftl-frontend-test.herokuapp.com/interest?amount=${\r\n\t\t\t\t\t\tthis.state.amount\r\n\t\t\t\t\t}&numMonths=${this.state.months}`\r\n\t\t\t\t)\r\n\t\t\t\t.then(res => {\r\n\t\t\t\t\tconsole.log(res.data);\r\n\t\t\t\t\tif (res.data.status && res.data.status === \"error\") {\r\n\t\t\t\t\t\tconsole.log(\"Error occurred\");\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\t\tinterestRate: res.data.interestRate,\r\n\t\t\t\t\t\t\tmonthlyPayment: res.data.monthlyPayment.amount,\r\n\t\t\t\t\t\t\tnumPayments: res.data.numPayments\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\t.catch(e => console.log(e));\r\n\t\t}\r\n\t}\r\n\r\n\tformatAmountLabel = val => {\r\n\t\treturn `$${val}`;\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<NavBar />\r\n\t\t\t\t<div className=\"container\">\r\n\t\t\t\t\t<form>\r\n\t\t\t\t\t\t<div className=\"form-group\">\r\n\t\t\t\t\t\t\t<label>Loan Amount</label>\r\n\t\t\t\t\t\t\t<InputRange\r\n\t\t\t\t\t\t\t\tmaxValue={5000}\r\n\t\t\t\t\t\t\t\tminValue={500}\r\n\t\t\t\t\t\t\t\tvalue={this.state.amount}\r\n\t\t\t\t\t\t\t\tonChange={amount => this.setState({ amount })}\r\n\t\t\t\t\t\t\t\tformatLabel={this.formatAmountLabel}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"form-group\">\r\n\t\t\t\t\t\t\t<label>Loan Duration (in months)</label>\r\n\t\t\t\t\t\t\t<InputRange\r\n\t\t\t\t\t\t\t\tmaxValue={24}\r\n\t\t\t\t\t\t\t\tminValue={6}\r\n\t\t\t\t\t\t\t\tvalue={this.state.months}\r\n\t\t\t\t\t\t\t\tonChange={months => this.setState({ months })}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</form>\r\n\t\t\t\t\t<br />\r\n\t\t\t\t\t\r\n\t\t\t\t\t<div className = \"well\">\r\n\t\t\t\t\t\t<h1>Interest Details </h1>\r\n\t\t\t\t\t\t<p>Interest Rate : <span> ${this.state.interestRate}</span></p>\r\n\t\t\t\t\t\t<p>Monthly Payment : <span> ${this.state.monthlyPayment}</span></p>\r\n\t\t\t\t\t\t<p>Number of Payments : <span> ${this.state.numPayments}</span></p>\r\n\r\n\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Home from './components/Home';\n\n\nfunction App() {\n  return (\n    <div className = \"container\">\n     <Home/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}